{"title":"分组控制","uid":"825b5ff282f50c9ddf9881510ca01667","slug":"分组控制","date":"2022-12-02T17:39:53.000Z","updated":"2022-12-03T08:09:01.869Z","comments":true,"path":"api/articles/分组控制.json","keywords":"kuan525","cover":null,"content":"<ul>\n<li>实现路由分组控制<h3 id=\"分组的意义\"><a href=\"#分组的意义\" class=\"headerlink\" title=\"分组的意义\"></a>分组的意义</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>分组控制是Web框架应提供的基础功能之一，所谓分组，是指路由的分组，如果没有路由分组，我们需要针对每一个路由进行控制，但是真是的业务场景中，往往某一组路由需要相似的处理，例如</p>\n<ol>\n<li>以<code>/post</code>开头的路由匿名可访问</li>\n<li>以<code>/admin</code>开头的路由需要鉴权</li>\n<li>以<code>api</code>开头的路由是RESTful接口，可以对接第三方平台，需要三方平台鉴权<br>例如<code>/post</code>是一个分组，<code>post/a</code>和<code>post/b</code>可以是该分组下的字分组。作用在<code>/post</code>分组上的中间件，也都作用在子分组，子分组还可以应用自己特有的中间件<br>例如<code>/admin</code>的分组，可以应用鉴权中间件；<code>/</code>分组应用日志中间件，<code>/</code>是默认的最顶层的分组，也就意味着给所有的路由，即整个框架增加了记录日志的能力。</li>\n</ol></blockquote>\n</li>\n</ul>\n<p>我们可以分组嵌套</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">v1 :&#x3D; r.Group(&quot;&#x2F;v1&quot;)  \n\t&#123;  \n\t\tv1.GET(&quot;&#x2F;&quot;, func(c *gee.Context) &#123;  \n\t\t\tc.HTML(http.StatusOK, &quot;&lt;h1&gt;Hello Gee&lt;&#x2F;h1&gt;&quot;)  \n\t\t&#125;)  \n  \n\t\tv1.GET(&quot;&#x2F;hello&quot;, func(c *gee.Context) &#123;  \n\t\t\t&#x2F;&#x2F; expect &#x2F;hello?name&#x3D;geektutu  \n\t\t\tc.String(http.StatusOK, &quot;hello %s, you&#39;re at %s\\n&quot;, c.Query(&quot;name&quot;), c.Path)  \n\t\t&#125;)  \n\t&#125;</code></pre>\n<p>一个Group对象需要具备的属性</p>\n<ol>\n<li>前缀<code>prefix</code></li>\n<li>父亲<code>parent</code></li>\n<li>中间件<code>middlewares</code></li>\n<li>指针，指向<code>Engine</code>，整个框架所有资源都是<code>Engine</code>统一协调的，那么就可以通过<code>Engine</code>间接的访问各种借口<h4 id=\"GRoup实现\"><a href=\"#GRoup实现\" class=\"headerlink\" title=\"GRoup实现\"></a>GRoup实现</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">RouterGroup struct &#123;  \n\tprefix      string  \n\tmiddlewares []HandlerFunc &#x2F;&#x2F; support middleware  \n\tparent      *RouterGroup  &#x2F;&#x2F; support nesting  \n\tengine      *Engine       &#x2F;&#x2F; all groups share a Engine instance  \n&#125;</code></pre>\n我们还需要将<code>Engine</code>作为最顶层的分组，也就是说<code>Engine</code>拥有<code>RouterGroup</code>所有的能力。<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">Engine struct &#123;  \n\t*RouterGroup  \n\trouter *router  \n\tgroups []*RouterGroup &#x2F;&#x2F; store all groups  \n&#125;</code></pre>\n然后我们只需要配置好<code>RouterGroup</code>的所有特有函数即可<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 初始化一个对象，即初始化一个结构体  \nfunc New() *Engine &#123;  \n   engine :&#x3D; &amp;Engine&#123;router: newRouter()&#125;  \n   engine.RouterGroup &#x3D; &amp;RouterGroup&#123;engine: engine&#125;  \n   engine.group &#x3D; []*RouterGroup&#123;engine.RouterGroup&#125;  \n   return engine  \n&#125;  \n  \n&#x2F;&#x2F; 声明一个group的儿子分组  \nfunc (group *RouterGroup) Group(prefix string) *RouterGroup &#123;  \n   engine :&#x3D; group.engine  \n   newGroup :&#x3D; &amp;RouterGroup&#123;  \n      prefix: group.prefix + prefix,  \n      parent: group,  \n      engine: engine,  \n   &#125;  \n   engine.group &#x3D; append(engine.group, newGroup)  \n   return newGroup  \n&#125;  \n  \n&#x2F;&#x2F; 通过分组添加路由  \nfunc (group *RouterGroup) addRoute(method string, comp string, handler HandlerFunc) &#123;  \n   pattern :&#x3D; group.prefix + comp  \n   log.Printf(&quot;Route %4s - %s&quot;, method, pattern)  \n   group.engine.router.addRoute(method, pattern, handler)  \n&#125;  \n  \n&#x2F;&#x2F; 通过分组实现GET请求处理  \nfunc (group *RouterGroup) GET(pattern string, handler HandlerFunc) &#123;  \n   group.addRoute(&quot;GET&quot;, pattern, handler)  \n&#125;  \n  \n&#x2F;&#x2F; 通过分组实现POST请求处理  \nfunc (group *RouterGroup) POST(pattern string, handler HandlerFunc) &#123;  \n   group.addRoute(&quot;POST&quot;, pattern, handler)  \n&#125;</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在<code>RouterGroup</code>特有的<code>addRoute</code>函数中，调用了<code>group.engine.router.addRoute</code>来实现了路由的映射。由于<code>Engine</code>从某种意义上即成了<code>RouterGroup</code>的所有属性和方法，因为<code>(*Engine).engine</code>是指向自己的。这样实现，我们既可以像原来一样添加路由，也可以通过分组添加路由</p></blockquote>\n</li>\n</ol>\n","feature":true,"text":" 实现路由分组控制分组的意义 分组控制是Web框架应提供的基础功能之一，所谓分组，是指路由的分组，如果没有路由分组，我们需要针对每一个路由进行控制，但是真是的业务场景中，往往某一组路由需要相似的处理，例如 以/post开头的路由匿名可访问 以/admin开头的路由需要鉴权 以ap...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Gee","slug":"Gee","count":5,"path":"api/tags/Gee.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E7%BB%84%E7%9A%84%E6%84%8F%E4%B9%89\"><span class=\"toc-text\">分组的意义</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#GRoup%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">GRoup实现</span></a></li></ol></li></ol>","author":{"name":"kuan525","slug":"blog-author","avatar":"https://s3.uuu.ovh/imgs/2022/12/01/7e58bc65f0f1b81a.jpg","link":"/","description":"24ng @weixin:kuan_525","socials":{"github":"https://github.com/kuan525","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/xiao-sheng-xiao-meng-1","csdn":"https://blog.csdn.net/m0_53025874","juejin":"https://juejin.cn/user/638157299124168","customs":{}}},"mapped":true,"prev_post":{"title":"中间件Middleware","uid":"e686c1a4072877da5733e5e099bd4bf0","slug":"中间件Middleware","date":"2022-12-03T07:06:46.000Z","updated":"2022-12-03T08:09:01.869Z","comments":true,"path":"api/articles/中间件Middleware.json","keywords":"kuan525","cover":null,"text":" 设计并实现web框架的中间件Middleware机制 实现通用的Logger中间件，能够记录请求到响应花费的时间中间件是什么 中间件，简单来说，就是非业务的技术类组件，Web框架本身不可以去理解所有的业务，因而不可以实现所有的功能，因此，框架需要有一个插口，允许用户自己定义功能...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Gee","slug":"Gee","count":5,"path":"api/tags/Gee.json"}],"author":{"name":"kuan525","slug":"blog-author","avatar":"https://s3.uuu.ovh/imgs/2022/12/01/7e58bc65f0f1b81a.jpg","link":"/","description":"24ng @weixin:kuan_525","socials":{"github":"https://github.com/kuan525","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/xiao-sheng-xiao-meng-1","csdn":"https://blog.csdn.net/m0_53025874","juejin":"https://juejin.cn/user/638157299124168","customs":{}}},"feature":true},"next_post":{"title":"前缀树路由","uid":"f614bbeabacde0e4aaa0d731d128996c","slug":"前缀树路由","date":"2022-12-02T16:09:02.000Z","updated":"2022-12-03T08:09:01.870Z","comments":true,"path":"api/articles/前缀树路由.json","keywords":"kuan525","cover":null,"text":" 使用trie树实现动态路由解析 支持两种模式，:name和*filepath Trie树实现 Trie树不多说了，结点树，始终每个节点存放一截字符串（网址）嵌入两种模式，则在每个节点处增加一个判断即可 节点结构体 type node struct &#123; pattern ...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"Gee","slug":"Gee","count":5,"path":"api/tags/Gee.json"}],"author":{"name":"kuan525","slug":"blog-author","avatar":"https://s3.uuu.ovh/imgs/2022/12/01/7e58bc65f0f1b81a.jpg","link":"/","description":"24ng @weixin:kuan_525","socials":{"github":"https://github.com/kuan525","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/xiao-sheng-xiao-meng-1","csdn":"https://blog.csdn.net/m0_53025874","juejin":"https://juejin.cn/user/638157299124168","customs":{}}},"feature":true}}