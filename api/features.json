[{"title":"LRU缓存淘汰策略","uid":"7d0e5e959c72a1d339ce2b2021e95c4f","slug":"LRU缓存淘汰策略","date":"2022-12-06T13:36:23.000Z","updated":"2022-12-06T13:36:43.413Z","comments":true,"path":"api/articles/LRU缓存淘汰策略.json","cover":null,"text":" 三种常用的淘汰（失效）算法：FIFO、LFU、LRU 实现LRU缓存淘汰算法FOFO（First In First Out） 先进先出，记录缓存中最老的记录，当空间不足的时候，放弃最老的这个即可，通常用一个队列实现。但是在很多地方，部分记录虽然是最早添加但也最经常访问，而不得不...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"GeeCache","slug":"GeeCache","count":1,"path":"api/tags/GeeCache.json"}],"author":{"name":"kuan525","slug":"blog-author","avatar":"https://s3.uuu.ovh/imgs/2022/12/01/7e58bc65f0f1b81a.jpg","link":"/","description":"24ng @weixin:kuan_525","socials":{"github":"https://github.com/kuan525","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/xiao-sheng-xiao-meng-1","csdn":"https://blog.csdn.net/m0_53025874","juejin":"https://juejin.cn/user/638157299124168","customs":{}}},"feature":true},{"title":"错误恢复","uid":"c641698123cd1e90bb25dbd165f925c7","slug":"错误恢复","date":"2022-12-06T07:42:59.000Z","updated":"2022-12-06T07:44:51.604Z","comments":true,"path":"api/articles/错误恢复.json","cover":null,"text":" 实现错误处理机制panic go语言中，比较常见的错误处理方法是返回error，由调用者决定后续如何处理。但是如果是无法恢复的错误，也可以手动触发panic，当然如果在程序运行过程中出现了类似的数组越界的错误，panic也会被触发。panic会终止当前执行的程序，退出。 def...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Gee","slug":"Gee","count":7,"path":"api/tags/Gee.json"}],"author":{"name":"kuan525","slug":"blog-author","avatar":"https://s3.uuu.ovh/imgs/2022/12/01/7e58bc65f0f1b81a.jpg","link":"/","description":"24ng @weixin:kuan_525","socials":{"github":"https://github.com/kuan525","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/xiao-sheng-xiao-meng-1","csdn":"https://blog.csdn.net/m0_53025874","juejin":"https://juejin.cn/user/638157299124168","customs":{}}},"feature":true},{"title":"模版Template","uid":"734934c646f4e8af2906c7234a7b150a","slug":"模版Template","date":"2022-12-05T13:30:57.000Z","updated":"2022-12-05T14:31:18.541Z","comments":true,"path":"api/articles/模版Template.json","cover":null,"text":" 实现静态资源服务 实现HTML模版渲染 在前后端分离的大趋势之下，前后端解藕，优势非常突出。但是有一大问题在于，页面是在客户端渲染的，比如浏览器，这对于爬虫并不友好，google爬虫已经能够爬去渲染后的网页，但是短期内爬取服务端直接渲染的HTML页面仍然是主流。 静态文件（Se...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Gee","slug":"Gee","count":7,"path":"api/tags/Gee.json"}],"author":{"name":"kuan525","slug":"blog-author","avatar":"https://s3.uuu.ovh/imgs/2022/12/01/7e58bc65f0f1b81a.jpg","link":"/","description":"24ng @weixin:kuan_525","socials":{"github":"https://github.com/kuan525","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/xiao-sheng-xiao-meng-1","csdn":"https://blog.csdn.net/m0_53025874","juejin":"https://juejin.cn/user/638157299124168","customs":{}}},"feature":true}]